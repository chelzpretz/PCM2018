install.packages('nicheROVER')
library('nicheROVER')
V
ell.pts <- ellipse(mu = mu, V = V, alpha = .9, n = 100)
plot(ell.pts, col = rainbow(110)[1:100], type = "o")
points(mu[1], mu[2], pch = "+")
mu
data(fish)
aggregate(fish[2:4], fish[1], mean)
niche.par.plot(niche.par, plot.mu = TRUE, plot.Sigma = TRUE, plot.index,
col, ndens = 512, ylab)
niche.par <- aggregate(fish[2:4], fish[1], mean)
niche.par.plot(niche.par, plot.mu = TRUE, plot.Sigma = TRUE, plot.index,
col, ndens = 512, ylab)
nsamples <- 1e3
?system.time
system.time({
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
})
clrs <- c("black", "red", "blue", "orange") # colors for each species
par(mar = c(4, 4, .5, .1)+.1, mfrow = c(1,3))
niche.par.plot(fish.par, col = clrs, plot.index = 1)
niche.par.plot(fish.par, col = clrs, plot.index = 2)
niche.par.plot(fish.par, col = clrs, plot.index = 1:2)
legend("topright", legend = names(fish.par), fill = clrs)
fish
fish[ii,2:4]
X = fish[ii,2:4]
niche.par.plot(fish.par, col = clrs, plot.mu = TRUE, plot.Sigma = FALSE)
legend("topright", legend = names(fish.par), fill = clrs)
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(fish.par, col = clrs, plot.mu = TRUE, plot.Sigma = TRUE)
legend("topright", legend = names(fish.par), fill = clrs)
nsamples <- 10
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
fish.data <- tapply(1:nrow(fish), fish$species, function(ii) X = fish[ii,2:4])
clrs <- c("black", "red", "blue", "orange") # colors for each species
niche.plot(niche.par = fish.par, niche.data = fish.data, pfrac = .1,
iso.names = expression(delta^{15}*N, delta^{13}*C, delta^{34}*S),
col = clrs, xlab = expression("Isotope Ratio (\u2030)"))
data(fish) # 4 fish, 3 isotopes
aggregate(fish[2:4], fish[1], mean) # isotope means per fish
nsamples <- 500
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
clrs <- c("black", "red", "blue", "orange") # colors for each species
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(fish.par, col = clrs)
legend(x = "topright", legend = names(fish.par), fill = clrs)
nsamples <- 10
niche.par.plot(fish.par, col = clrs)
legend(x = "topright", legend = names(fish.par), fill = clrs)
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
fish.data <- tapply(1:nrow(fish), fish$species, function(ii) X = fish[ii,2:4])
niche.plot(niche.par = fish.par, niche.data = fish.data, pfrac = .05,
iso.names = expression(delta^{15}*N, delta^{13}*C, delta^{34}*S),
col = clrs, xlab = expression("Isotope Ratio (\u2030)"))
nsamples <- 500
over.stat <- overlap(fish.par, nreps = nsamples, nprob = nsamples, alpha = .95)
overlap.plot(over.stat, col = clrs, mean.cred.col = "turquoise", equal.axis = TRUE,
xlab = "Overlap Probability (%) -- Niche Region Size: 95%")
d <- 4
mu0 <- rnorm(d)
Sigma0 <- matrix(rnorm(d^2), d, d)
Sigma0 <- Sigma0 %*% t(Sigma0)
N <- 100
X <- rmvnorm(N, mean = mu0, sigma = Sigma0)
lambda <- 0
Omega <- 0
Psi <- crossprod(matrix(rnorm(d^2), d, d))
nu <- 5
nsamples <- 2e3
system.time({
siiw <- niiw.post(nsamples, X, lambda, Omega, Psi, nu, burn = 100)
})
kappa <- 0
system.time({
siw <- niw.post(nsamples, X, lambda, kappa, Psi, nu)
})
clrs <- c("black", "red")
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(list(siiw, siw), col = clrs, plot.mu = TRUE, plot.Sigma = FALSE)
legend(x = "topright", legend = c("NIIW Prior", "NIW Prior"), fill = clrs)
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(list(siiw, siw), col = clrs, plot.mu = FALSE, plot.Sigma = TRUE)
legend(x = "topright", legend = c("NIIW Prior", "NIW Prior"), fill = clrs)
d <- 4
mu0 <- rnorm(d)
Sigma0 <- matrix(rnorm(d^2), d, d)
Sigma0 <- Sigma0 %*% t(Sigma0)
N <- 1e2
X <- rmvnorm(N, mean = mu0, sigma = Sigma0)
lambda <- rnorm(d)
kappa <- 20
Psi <- crossprod(matrix(rnorm(d^2), d, d))
nu <- 5
nsamples <- 2e3
siw0 <- rniw(nsamples, lambda, kappa, Psi, nu)
siw1 <- niw.post(nsamples, X, lambda, kappa, Psi, nu)
siw2 <- niw.post(nsamples, X)
clrs <- c("orange", "red", "blue", "black")
ii <- 1
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(list(siw0, siw1, siw2), col = clrs[1:3],
plot.index = ii, ylab = "Density")
abline(v = mu0[ii], col = clrs[4]) # true value of mu
legend(x = "topright",
legend = c(parse(text = paste0("pi(mu[", ii, "])")),
parse(text = paste0("p(mu[", ii, "]*\" | \"*X)*\", Informative Prior\"")),
parse(text = paste0("p(mu[", ii, "]*\" | \"*X)*\", Noninformative Prior\"")),
parse(text = paste0("\"True value of \"*mu[", ii, "]"))),
fill = clrs)
ii <- 1
jj <- 2
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(list(siw0, siw1, siw2), col = clrs[1:3],
plot.index = c(ii,jj), ylab = "Density")
abline(v = Sigma0[ii,jj], col = clrs[4])
legend(x = "topright",
legend = c(parse(text = paste0("pi(Sigma[", ii, "*", jj, "])")),
parse(text = paste0("p(Sigma[", ii, "*", jj,
"]*\" | \"*X)*\", Informative Prior\"")),
parse(text = paste0("p(Sigma[", ii, "*", jj,
"]*\" | \"*X)*\", Noninformative Prior\"")),
parse(text = paste0("\"True value of \"*Sigma[", ii, "*", jj, "]"))),
fill = clrs)
par(mar = c(4.2, 4.2, 2, 1)+.1)
niche.par.plot(list(siw0, siw1, siw2), col = clrs[1:3],
plot.index = ii, ylab = "Density")
abline(v = mu0[ii], col = clrs[4]) # true value of mu
legend(x = "topright",
legend = c(parse(text = paste0("pi(mu[", ii, "])")),
parse(text = paste0("p(mu[", ii, "]*\" | \"*X)*\", Informative Prior\"")),
parse(text = paste0("p(mu[", ii, "]*\" | \"*X)*\", Noninformative Prior\"")),
parse(text = paste0("\"True value of \"*mu[", ii, "]"))),
fill = clrs)
data(fish)
nsamples <- 500
system.time({
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
})
system.time({
over <- overlap(fish.par, nreps = nsamples, nprob = nsamples, alpha = c(.95, .99))
})
over.mean <- apply(over*100, c(1:2, 4), mean)
round(over.mean)
over.cred <- apply(over*100, c(1:2, 4), quantile, prob = c(.025, .975), na.rm = TRUE)
round(over.cred[,,,1]) # display alpha = .95 niche region
clrs <- c("black", "red", "blue", "orange") # color for each species
ii <- 1 # which niche region alpha level to use
overlap.plot(over[,,,ii], col = clrs, mean.cred.col = "turquoise",
xlab = paste0("Overlap Probability (%) -- Niche Region Size: ",
dimnames(over)[[4]][ii]))
d <- 4 # number of dimensions
nu <- 7 # degrees of freedom
Psi <- crossprod(matrix(rnorm(d^2), d, d)) # scale
lambda <- rnorm(d)
kappa <- 2
n <- 1e4
niw.sim <- rniw(n, lambda, kappa, Psi, nu)
S <- apply(niw.sim$Sigma, 3, function(M) diag(solve(M)))
ii <- 2
const <- solve(Psi)[ii,ii]
hist(S[ii,], breaks = 100, freq = FALSE,
main = parse(text = paste0("\"Histogram of \"*(Sigma^{-1})[", ii,ii,"]")),
xlab = parse(text = paste0("(Sigma^{-1})[", ii,ii,"]")))
curve(dchisq(x/const, df = nu)/const,
from = min(S[ii,]), to = max(S[ii,]), col = "red", add = TRUE)
mu <- niw.sim$mu
rwish 19
ii <- 4
const <- sqrt(Psi[ii,ii]/(kappa*(nu-d+1)))
hist(mu[,ii], breaks = 100, freq = FALSE,
main = parse(text = paste0("\"Histogram of \"*mu[", ii, "]")),
xlab = parse(text = paste0("mu[", ii, "]")))
curve(dt((x-lambda[ii])/const, df = nu-d+1)/const, add = TRUE, col = "red")
d <- 4 # number of dimensions
nu <- 7 # degrees of freedom
Psi <- crossprod(matrix(rnorm(d^2), d, d)) # scale matrix
n <- 1e4
Sigma <- rwish(n, Psi, nu)
a <- rnorm(d)
X <- apply(Sigma, 3, function(S) crossprod(a, S %*% a))
const <- a %*% Psi %*% a
hist(X, breaks = 100, freq = FALSE,
main = parse(text = "\"Histogram of \"*X==a*minute*Sigma*a"),
xlab = parse(text = "X==a*minute*Sigma*a"))
curve(dchisq(x/const, df = nu)/const,
from = min(X), to = max(X), col = "red", add = TRUE)
install.packages("phyloclim")
library("phyloclim")
data(PNO)
no <- niche.overlap(PNO$AnnualMeanTemperature)
data(tree)
x <- age.range.correlation(phy = tree, overlap = no, n = 100)
plot(x$age.range.correlation)
abline(x$linear.regression$coefficients)
apply(x$MonteCarlo.replicates, 1, abline, lwd = 0.2, col = "grey50")
mfrow= par(c(1,1))
plot(x$age.range.correlation)
par(mfrow=c(1,1))
plot(x$age.range.correlation)
abline(x$linear.regression$coefficients)
apply(x$MonteCarlo.replicates, 1, abline, lwd = 0.2, col = "grey50")
data(equ)
plot(equ)
data(sim)
plot(sim)
maxent.exe <- paste(system.file(package="dismo"), "C:/Users/Chelsea/Documents/R/win-library/3.1/dismo/java/maxent/maxent.jar", sep='')
species <- c("enneaphylla", "laciniata")
data(sites)
samples <- sites[grep(paste(species, collapse = "|"), sites$spec), ]
data.path <- system.file("extdata", package = "phyloclim")
preds <- list.files(path = data.path, pattern = "[.]asc")
preds <- paste(data.path, preds, sep = "/")
preds <- stack(lapply(X = preds, FUN = raster))
reps <- 9
if (file.exists(maxent.exe)){
net <- niche.equivalency.test(samples, preds, reps, maxent.exe)
net; plot(net)
bst <- bg.similarity.test(samples, preds, reps, app = maxent.exe)
bst; plot(bst)
} else {
message("get a copy of MAXENT (see Details)")
}
data(PNO)
no <- niche.overlap(PNO$AnnualPrecipitation)
print(no)
plotPNO(x = PNO$AnnualMeanTemperature,
xlab = "Annual Mean Temperature (degree C)")
plotPNO(x = PNO$AnnualMeanTemperature,
xlab = "Annual Mean Temperature (degree C)", wm = TRUE)
clrea
clear
top
data <- read.csv("/Users/Chelsea/Documents/SmithLab/Physalis/Morphometrics/Measurements.csv" )
data
log.da <- log(data)
head(data)
log.da <- log(data[4,10])
head(log.da)
log.da <- log(data[4:10])
head(log.da)
log.da <- log(data[,4:10])
head(log.da)
da.species <- data[,1]
head(da.species)
da.populations <- data[,2]
da.pop <- data[,2]
head(da.pop)
da.pca <- prcomp(log.da, center = TRUE, scale. = TRUE)
print(da.pca)
print(da.pca)
plot(da.pca, type = "l")
plot(da.pca, type = "l")
summary(da.pca)
predict(da.pca, newdata = tail(log.da, 2))
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(da.pca, obs.scale = 1, var.scale = 1,
groups = da.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
gg <- ggbiplot(da.pca, obs.scale = 1, var.scale = 1,
groups = da.pop, ellipse = TRUE,
circle = TRUE)
gg <- gg + scale_color_discrete(name = '')
gg <- gg + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(gg)
library(ggplot2)
head(data)
ggplot(data, aes(X, Y, color = Species)) + geom_point()
data <- read.csv("/Users/Chelsea/Documents/SmithLab/Physalis/Morphometrics/Measurements.csv" )
ggplot(data, aes(X, Y, color = Species)) + geom_point()
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
set.seed(20)
dataCluster <- kmeans(data[, 4:10], 2, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(data, aes(color = data$cluster)) + geom_point()
ggplot(data, aes(x, y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
data$cluster
dataCluster
ggplot(data, aes(Area, X, Y, Circ, AR, Round, Solidity, color = data$cluster)) + geom_point()
ggplot(data, ) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
length(data)
head(data)
data <- data[,1:10]
data
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
colnames(data)
data1 <- data[,1 & 4:10]
data1
table(dataCluster$cluster, data$Species)
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
set.seed(20)
dataCluster <- kmeans(data[, 4:10], 2, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster <- kmeans(data[, 4:10], 6, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster$cluster <- as.factor(dataCluster$cluster)
dataCluster
ggplot(dataCluster, aes(X, Y, color = data$cluster)) + geom_point()
dataCluster$cluste
dataCluster$cluster
ggplot(dataCluster, aes(X, Y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, color = data$cluster)) + geom_point()
ggplot(data, aes((colnames(data), color = data$cluster)) + geom_point()
ggplot(data, aes((colnames(data)), color = data$cluster)) + geom_point()
colnames(data)
length(data)
ggplot(data, aes((length(data)), color = data$cluster)) + geom_point()
plot(data, aes((length(data)), color = data$cluster)) + geom_point()
plot(data, color = data$cluster) + geom_point()
plot(data, color = data$cluster, type= "l")
data$cluster <- as.factor(dataCluster$cluster)
data
head(data)
plot(data, col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data, col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data[,4:10], col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
data[,4:10]
plot(data[,4:10], col =(dataCluster$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data[,4:10], col =(dataCluster$cluster + 1) , main="K-Means result with 6 clusters", pch=20, cex=2)
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
ggplot(data, aes(X, Y, color = Species)) + geom_point()
ggplot(data, aes(Area, Y, color = Species)) + geom_point()
ggplot(data, aes(Area, Round, color = Species)) + geom_point()
ggplot(data, aes(Area, Solidity, color = Species)) + geom_point()
ggplot(data, aes(Round, Solidity, color = Species)) + geom_point()
ggplot(data, aes(Round, Circ., color = Species)) + geom_point()
print(da.pca)
predict(da.pca, newdata = tail(log.da, 2))
print(g)
data <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(data)
plot(data)
plot(data[,5:8])
plot(data[,5:8], type="b")
?plot
plot(data[,5:8], type="h")
data <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(data)
plot(data$Seeds ~ data$Fruit.Weight)
plot(data$Seeds ~ data$Type)
boxplot(data$Seeds ~ data$Type)
plot(data$Seeds ~ data$Type)
boxplot(data$Seeds ~ data$Type)
plot(data$Friuts ~ data$Seeds)
plot(data$Fruits ~ data$Seeds)
plot(data$Fruits ~ data$Type)
boxplot(data$Fruits ~ data$Type)
plot(data$Fruit.Weight ~ data$Seeds)
plot(data$Fruit.Weight ~ data$Seeds, type="h")
plot(data$Seeds ~ data$Fruit.Weight)
Seeds
plot(data$Fruit.Weight ~ data$Seeds)
crosses <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(Fruit.Weight ~ Seeds, data=crosses)
boxlot(Fruit.Weight ~ Seeds, data=crosses)
boxplot(Fruit.Weight ~ Seeds, data=crosses)
plot(Fruit.Weight, Seeds, data=crosses, type = "l")
plot(crosses$Fruit.Weight, crosses$Seeds, type = "l")
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
results <-lm(crosses$Seeds ~ crosses$Type)
summary(results)
plot(results)
?t.test
t.test(crosses$Fruit.Weight, crosses$Seeds)
t.test(crosses$Fruit.Weight ~ crosses$Seeds)
t.test(crosses$Fruits ~ crosses$Seeds)
crosses <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
source()
search()
import("phytools")
library("phytools")
search()
search()
## Take a moment and do this now. Use the commands:
getwd() # see where we are starting
dir.create('PCM2018-tutorials')
setwd('PCM2018-tutorials')
dir.create('tutorial.01')
setwd('tutorial.01')
dir.create('scripts')
dir.create('data')
dir.create('workspace')
dir()
setwd('workspace')
getwd() # see where we are starting
setwd(/Users/Chelsea/Documents/PhD/PCM2018/PCM2018)
setwd("Users/Chelsea/Documents/PhD/PCM2018/PCM2018")
setwd("C://Users/Chelsea/Documents/PhD/PCM2018/PCM2018")
getwd() # see where we are starting
dir.create('PCM2018-tutorials')
setwd('PCM2018-tutorials')
dir.create('tutorial.01')
setwd('tutorial.01')
dir.create('scripts')
dir.create('data')
dir.create('workspace')
dir()
setwd('workspace')
y = sapply(1:50, function(x) c(0, rnorm(999, mean = 0, sd = 0.2))) # result is a matrix of random-normal vectors,
layout(matrix(1:2, 1)) # layout two plotting frames
plot(1:20, cumsum(y[1:20, 1]), 'l', ylim = range(c(cumsum(y[1:100, 1]), cumsum(y[1:100, 2]))), main = "tree of 20 steps")
lines(1:20, cumsum(y[1:20, 2]))
plot(1:100, cumsum(y[1:100, 1]), 'l', ylim = range(c(cumsum(y[1:100, 1]), cumsum(y[1:100, 2]))), main = "tree of 100 steps")
lines(1:100, cumsum(y[1:100, 2]))
for(i in c(20, 50, 100, 1000)) {
endpointOfEvolution <- apply(y[1:i, ], 2, sum)
message(paste('At time =', i))
message(paste('   mean trait value =', round(mean(endpointOfEvolution), 2)))
message(paste('   trait value variance =', round(var(endpointOfEvolution), 2)))
message('')
}
?apply
library(phytools)
library(geiger)
tr <- pbtree(n=20) # a pure birth tree, because it's easy
xy <- sim.char(tr, matrix(c(20,15,15,20), 2, byrow = T))[,,1]
dimnames(xy)[[2]] <- c('x', 'y')
layout(matrix(1:2, 1, 2))
fancyTree(tr, "contmap", x = xy[, 1])
plot(xy)
abline(lm(y ~ x, as.data.frame(xy)))
print(summary(lm(y ~ x, as.data.frame(xy))))
tr <- reorder(tr, 'postorder')
tr.orig <- tr # hanging onto this for now b/c we'll be mucking up the tree later
plot(tr)
nodelabels()
edgelabels()
tr.edge <- cbind(tr$edge, endlabel = tr$tip.label[tr$edge[, 2]])
tr.edge[is.na(tr.edge[, 'endlabel']), 'endlabel'] <-
as.character(tr.edge[is.na(tr.edge[, 'endlabel']), 2])
print(head(tr.edge, 20)) # first 20 rows of the tr$edge, with tip labels
nodesToDo <- unique(tr$edge[, 1])
ind.contrasts <- rep(NA, length(nodesToDo))
names(ind.contrasts) <- sort(as.character(nodesToDo))
contrasts.sd <- ind.contrasts
means <- c(x, ind.contrasts)
names(means)[which(names(means) %in% tr$tip.label)] <-
match(names(means)[which(names(means) %in% tr$tip.label)], tr$tip.label)
print(means) # make sure it looks right, and it does
x <- xy[, 1]
means <- c(x, ind.contrasts)
names(means)[which(names(means) %in% tr$tip.label)] <-
match(names(means)[which(names(means) %in% tr$tip.label)], tr$tip.label)
print(means) # make sure it looks right, and it does
tr$edge.length[branch.to.rescale] <-
tr$edge.length[branch.to.rescale] +
(desc.lengths[1] * desc.lengths[2]) / sum(desc.lengths)
for(working.node in nodesToDo) {
# do a little book-keeping
edges <- which(tr$edge[, 1] == working.node)
desc.values <- means[as.character(tr$edge[edges, 2])]
desc.lengths <- tr$edge.length[edges]
branch.to.rescale <- which(tr$edge[, 2] == working.node)
# 1. make and store the weighted average
# means[as.character(working.node)] <- weighted.mean(desc.values, 1/desc.lengths)
means[as.character(working.node)] <- sum(desc.values * (1/desc.lengths))/sum(1/desc.lengths)
# 2. do the contrast and its sd
ind.contrasts[as.character(working.node)] <- diff(desc.values)
contrasts.sd[as.character(working.node)] <- sqrt(sum(desc.lengths))
# 3. rescale the remaining branch
tr$edge.length[branch.to.rescale] <-
tr$edge.length[branch.to.rescale] +
(desc.lengths[1] * desc.lengths[2]) / sum(desc.lengths)
}
ancStatesCompare <- cbind(ape = ace(x, tr.orig, method = 'pic')$ace[as.character(nodesToDo)],
ourFct = means[as.character(nodesToDo)])
picCompare <- cbind(ape = pic(x, tr.orig)[as.character(nodesToDo)],
ourFct = ind.contrasts[as.character(nodesToDo)] / contrasts.sd[as.character(nodesToDo)])
layout(matrix(1:2, 1))
plot(ancStatesCompare, main = "comparing node states")
abline(0, 1)
plot(picCompare, main = "comparing normalized contrasts")
abline(0, -1)
