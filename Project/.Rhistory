nsamples <- 500
system.time({
fish.par <- tapply(1:nrow(fish), fish$species,
function(ii) niw.post(nsamples = nsamples, X = fish[ii,2:4]))
})
system.time({
over <- overlap(fish.par, nreps = nsamples, nprob = nsamples, alpha = c(.95, .99))
})
over.mean <- apply(over*100, c(1:2, 4), mean)
round(over.mean)
over.cred <- apply(over*100, c(1:2, 4), quantile, prob = c(.025, .975), na.rm = TRUE)
round(over.cred[,,,1]) # display alpha = .95 niche region
clrs <- c("black", "red", "blue", "orange") # color for each species
ii <- 1 # which niche region alpha level to use
overlap.plot(over[,,,ii], col = clrs, mean.cred.col = "turquoise",
xlab = paste0("Overlap Probability (%) -- Niche Region Size: ",
dimnames(over)[[4]][ii]))
d <- 4 # number of dimensions
nu <- 7 # degrees of freedom
Psi <- crossprod(matrix(rnorm(d^2), d, d)) # scale
lambda <- rnorm(d)
kappa <- 2
n <- 1e4
niw.sim <- rniw(n, lambda, kappa, Psi, nu)
S <- apply(niw.sim$Sigma, 3, function(M) diag(solve(M)))
ii <- 2
const <- solve(Psi)[ii,ii]
hist(S[ii,], breaks = 100, freq = FALSE,
main = parse(text = paste0("\"Histogram of \"*(Sigma^{-1})[", ii,ii,"]")),
xlab = parse(text = paste0("(Sigma^{-1})[", ii,ii,"]")))
curve(dchisq(x/const, df = nu)/const,
from = min(S[ii,]), to = max(S[ii,]), col = "red", add = TRUE)
mu <- niw.sim$mu
rwish 19
ii <- 4
const <- sqrt(Psi[ii,ii]/(kappa*(nu-d+1)))
hist(mu[,ii], breaks = 100, freq = FALSE,
main = parse(text = paste0("\"Histogram of \"*mu[", ii, "]")),
xlab = parse(text = paste0("mu[", ii, "]")))
curve(dt((x-lambda[ii])/const, df = nu-d+1)/const, add = TRUE, col = "red")
d <- 4 # number of dimensions
nu <- 7 # degrees of freedom
Psi <- crossprod(matrix(rnorm(d^2), d, d)) # scale matrix
n <- 1e4
Sigma <- rwish(n, Psi, nu)
a <- rnorm(d)
X <- apply(Sigma, 3, function(S) crossprod(a, S %*% a))
const <- a %*% Psi %*% a
hist(X, breaks = 100, freq = FALSE,
main = parse(text = "\"Histogram of \"*X==a*minute*Sigma*a"),
xlab = parse(text = "X==a*minute*Sigma*a"))
curve(dchisq(x/const, df = nu)/const,
from = min(X), to = max(X), col = "red", add = TRUE)
install.packages("phyloclim")
library("phyloclim")
data(PNO)
no <- niche.overlap(PNO$AnnualMeanTemperature)
data(tree)
x <- age.range.correlation(phy = tree, overlap = no, n = 100)
plot(x$age.range.correlation)
abline(x$linear.regression$coefficients)
apply(x$MonteCarlo.replicates, 1, abline, lwd = 0.2, col = "grey50")
mfrow= par(c(1,1))
plot(x$age.range.correlation)
par(mfrow=c(1,1))
plot(x$age.range.correlation)
abline(x$linear.regression$coefficients)
apply(x$MonteCarlo.replicates, 1, abline, lwd = 0.2, col = "grey50")
data(equ)
plot(equ)
data(sim)
plot(sim)
maxent.exe <- paste(system.file(package="dismo"), "C:/Users/Chelsea/Documents/R/win-library/3.1/dismo/java/maxent/maxent.jar", sep='')
species <- c("enneaphylla", "laciniata")
data(sites)
samples <- sites[grep(paste(species, collapse = "|"), sites$spec), ]
data.path <- system.file("extdata", package = "phyloclim")
preds <- list.files(path = data.path, pattern = "[.]asc")
preds <- paste(data.path, preds, sep = "/")
preds <- stack(lapply(X = preds, FUN = raster))
reps <- 9
if (file.exists(maxent.exe)){
net <- niche.equivalency.test(samples, preds, reps, maxent.exe)
net; plot(net)
bst <- bg.similarity.test(samples, preds, reps, app = maxent.exe)
bst; plot(bst)
} else {
message("get a copy of MAXENT (see Details)")
}
data(PNO)
no <- niche.overlap(PNO$AnnualPrecipitation)
print(no)
plotPNO(x = PNO$AnnualMeanTemperature,
xlab = "Annual Mean Temperature (degree C)")
plotPNO(x = PNO$AnnualMeanTemperature,
xlab = "Annual Mean Temperature (degree C)", wm = TRUE)
clrea
clear
top
data <- read.csv("/Users/Chelsea/Documents/SmithLab/Physalis/Morphometrics/Measurements.csv" )
data
log.da <- log(data)
head(data)
log.da <- log(data[4,10])
head(log.da)
log.da <- log(data[4:10])
head(log.da)
log.da <- log(data[,4:10])
head(log.da)
da.species <- data[,1]
head(da.species)
da.populations <- data[,2]
da.pop <- data[,2]
head(da.pop)
da.pca <- prcomp(log.da, center = TRUE, scale. = TRUE)
print(da.pca)
print(da.pca)
plot(da.pca, type = "l")
plot(da.pca, type = "l")
summary(da.pca)
predict(da.pca, newdata = tail(log.da, 2))
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(da.pca, obs.scale = 1, var.scale = 1,
groups = da.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
gg <- ggbiplot(da.pca, obs.scale = 1, var.scale = 1,
groups = da.pop, ellipse = TRUE,
circle = TRUE)
gg <- gg + scale_color_discrete(name = '')
gg <- gg + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(gg)
library(ggplot2)
head(data)
ggplot(data, aes(X, Y, color = Species)) + geom_point()
data <- read.csv("/Users/Chelsea/Documents/SmithLab/Physalis/Morphometrics/Measurements.csv" )
ggplot(data, aes(X, Y, color = Species)) + geom_point()
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
set.seed(20)
dataCluster <- kmeans(data[, 4:10], 2, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster$cluster <- as.factor(dataCluster$cluster)
ggplot(data, aes(color = data$cluster)) + geom_point()
ggplot(data, aes(x, y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
data$cluster
dataCluster
ggplot(data, aes(Area, X, Y, Circ, AR, Round, Solidity, color = data$cluster)) + geom_point()
ggplot(data, ) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
length(data)
head(data)
data <- data[,1:10]
data
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
colnames(data)
data1 <- data[,1 & 4:10]
data1
table(dataCluster$cluster, data$Species)
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
set.seed(20)
dataCluster <- kmeans(data[, 4:10], 2, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster <- kmeans(data[, 4:10], 6, nstart = 20)
dataCluster
table(dataCluster$cluster, data$Species)
dataCluster$cluster <- as.factor(dataCluster$cluster)
dataCluster
ggplot(dataCluster, aes(X, Y, color = data$cluster)) + geom_point()
dataCluster$cluste
dataCluster$cluster
ggplot(dataCluster, aes(X, Y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, Y, color = data$cluster)) + geom_point()
ggplot(data, aes(X, color = data$cluster)) + geom_point()
ggplot(data, aes((colnames(data), color = data$cluster)) + geom_point()
ggplot(data, aes((colnames(data)), color = data$cluster)) + geom_point()
colnames(data)
length(data)
ggplot(data, aes((length(data)), color = data$cluster)) + geom_point()
plot(data, aes((length(data)), color = data$cluster)) + geom_point()
plot(data, color = data$cluster) + geom_point()
plot(data, color = data$cluster, type= "l")
data$cluster <- as.factor(dataCluster$cluster)
data
head(data)
plot(data, col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data, col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data[,4:10], col =(data$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
data[,4:10]
plot(data[,4:10], col =(dataCluster$cluster +1) , main="K-Means result with 6 clusters", pch=20, cex=2)
plot(data[,4:10], col =(dataCluster$cluster + 1) , main="K-Means result with 6 clusters", pch=20, cex=2)
ggplot(data, aes(X, Y, color = Voucher)) + geom_point()
ggplot(data, aes(X, Y, color = Species)) + geom_point()
ggplot(data, aes(Area, Y, color = Species)) + geom_point()
ggplot(data, aes(Area, Round, color = Species)) + geom_point()
ggplot(data, aes(Area, Solidity, color = Species)) + geom_point()
ggplot(data, aes(Round, Solidity, color = Species)) + geom_point()
ggplot(data, aes(Round, Circ., color = Species)) + geom_point()
print(da.pca)
predict(da.pca, newdata = tail(log.da, 2))
print(g)
data <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(data)
plot(data)
plot(data[,5:8])
plot(data[,5:8], type="b")
?plot
plot(data[,5:8], type="h")
data <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(data)
plot(data$Seeds ~ data$Fruit.Weight)
plot(data$Seeds ~ data$Type)
boxplot(data$Seeds ~ data$Type)
plot(data$Seeds ~ data$Type)
boxplot(data$Seeds ~ data$Type)
plot(data$Friuts ~ data$Seeds)
plot(data$Fruits ~ data$Seeds)
plot(data$Fruits ~ data$Type)
boxplot(data$Fruits ~ data$Type)
plot(data$Fruit.Weight ~ data$Seeds)
plot(data$Fruit.Weight ~ data$Seeds, type="h")
plot(data$Seeds ~ data$Fruit.Weight)
Seeds
plot(data$Fruit.Weight ~ data$Seeds)
crosses <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(Fruit.Weight ~ Seeds, data=crosses)
boxlot(Fruit.Weight ~ Seeds, data=crosses)
boxplot(Fruit.Weight ~ Seeds, data=crosses)
plot(Fruit.Weight, Seeds, data=crosses, type = "l")
plot(crosses$Fruit.Weight, crosses$Seeds, type = "l")
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
results <-lm(crosses$Seeds ~ crosses$Type)
summary(results)
plot(results)
?t.test
t.test(crosses$Fruit.Weight, crosses$Seeds)
t.test(crosses$Fruit.Weight ~ crosses$Seeds)
t.test(crosses$Fruits ~ crosses$Seeds)
crosses <- read.csv("C:/Users/Chelsea/Documents/SmithLab/Physalis/Pollination/GreenhouseCrosses12.14.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
plot(Fruits ~ Type, data=crosses)
plot(crosses$Fruit.Weight, crosses$Seeds, type = "p")
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
head(crosses)
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
crosses <- read.csv("C:/Users/Chelsea/Desktop/P.acutCrosses.csv")
plot(Seeds ~ Type, data=crosses)
source()
search()
import("phytools")
library("phytools")
search()
search()
library(phytools)
library(geiger)
# make phylogeny
a=tr <- pbtree(n = 100)
dat <- sim.char(tr, matrix(c(1,0,0,1), 2, 2))[,,1]
colnames(dat) <- c('y', 'x')
#layout(matrix(c(1:2, 1, 2)))
par(mfrow = c(1,2))
plot(tr)
plot(dat)
round(solve(tr.v), 2)[1:10, 1:10]
round(solve(tr.v) %*% tr.v, 2)[1:10, 1:10]
a=tr <- pbtree(n = 100)
dat <- sim.char(tr, matrix(c(1,0,0,1), 2, 2))[,,1]
colnames(dat) <- c('y', 'x')
#layout(matrix(c(1:2, 1, 2)))
par(mfrow = c(1,2))
plot(tr)
plot(dat)
tr.v <- vcv.phylo(tr)
round(tr.v[1:10, 1:10], 2) # shows just the upper lefthand corner of your matrix
round(solve(tr.v), 2)[1:10, 1:10]
round(solve(tr.v) %*% tr.v, 2)[1:10, 1:10]
one <- matrix(1, length(tr$tip.label), 1) # a matrix of 1s, 1 column
tr.w <- t(one) %*% solve(tr.v)
a=plot(tr, show.tip.label = F, x.lim = nodeheight(tr,1) * 3) # sets the plot window width to be thrice the tree depth
phydataplot(tr.w[1,] / max(tr.w[1,]) * nodeheight(tr, 1), tr)
?factor
library(nlme)
out <- gls(y ~ x, as.data.frame(dat), corPagel(1, tr))
summary(out)
b.gls <- function(tr, dat, y = 'y', x = 'x') {
#print(dat)
v.solved <- solve(vcv.phylo(tr))
one <- matrix(1, length(tr$tip.label))
X <- cbind(origin = one, x = dat[, x])
out <- solve(t(X) %*% v.solved %*% X) %*% (t(X) %*% v.solved %*% dat[, y])
out
}
b.ols <- function(dat, y = 'y', x = 'x') {
one <- matrix(1, dim(dat)[1])
X <- cbind(origin = one, x = dat[, x])
out <- solve(t(X) %*% X) %*% (t(X) %*% dat[, y])
out
}
message('GLS coefficients (intercept and slope)')
b.gls(tr, dat)
message('OLS coefficients (intercept and slope)')
b.ols(dat)
library(nlme)
out <- gls(y ~ x, as.data.frame(dat), corPagel(1, tr))
summary(out)
## Lab 3: Generalized least squares
library(phytools)
library(geiger)
# make phylogeny
a=tr <- pbtree(n = 100)
dat <- sim.char(tr, matrix(c(1,0,0,1), 2, 2))[,,1]
colnames(dat) <- c('y', 'x')
#layout(matrix(c(1:2, 1, 2)))
par(mfrow = c(1,2))
plot(tr)
plot(dat)
# making a variance-covariance matrix of the tree
tr.v <- vcv.phylo(tr)
round(tr.v[1:10, 1:10], 2) # shows just the upper lefthand corner of your matrix
# Invert the martix it: the inverted matrix is that matrix that multiplied by the original (uninverted) matrix yields a matrix with diagonals of 1 and off-diagonals of 0
round(solve(tr.v), 2)[1:10, 1:10]
round(solve(tr.v) %*% tr.v, 2)[1:10, 1:10]
# Using the inverted matrix, data can be weighted by how phylogenetically distinct the corresponding tips are.
# To visualize these weights, multiply the inverted matrix by a column-matrix of ones (for example, matrix(1, 10) is a one-column matrix of 10 1s).
one <- matrix(1, length(tr$tip.label), 1) # a matrix of 1s, 1 column
tr.w <- t(one) %*% solve(tr.v)
a=plot(tr, show.tip.label = F, x.lim = nodeheight(tr,1) * 3) # sets the plot window width to be thrice the tree depth
phydataplot(tr.w[1,] / max(tr.w[1,]) * nodeheight(tr, 1), tr)
# GLS estimate of regression coefficients with the OLS (ordinary least squares) estimates, using equations from Symonds and Blomberg Appendix A
b.gls <- function(tr, dat, y = 'y', x = 'x') {
#print(dat)
v.solved <- solve(vcv.phylo(tr))
one <- matrix(1, length(tr$tip.label))
X <- cbind(origin = one, x = dat[, x])
out <- solve(t(X) %*% v.solved %*% X) %*% (t(X) %*% v.solved %*% dat[, y])
out
}
b.ols <- function(dat, y = 'y', x = 'x') {
one <- matrix(1, dim(dat)[1])
X <- cbind(origin = one, x = dat[, x])
out <- solve(t(X) %*% X) %*% (t(X) %*% dat[, y])
out
}
message('GLS coefficients (intercept and slope)')
b.gls(tr, dat)
message('OLS coefficients (intercept and slope)')
b.ols(dat)
# Revell and Symonds and Blomberg both discuss estimating phylogenetic signal simultaneously with the regression coefficients. This is really simple to do in R. Here is an example:
library(nlme)
out <- gls(y ~ x, as.data.frame(dat), corPagel(1, tr))
summary(out)
gls.r.squared <- function(x) {
# based on Judge et al. 1985, eq. 2.3.16
e = x$resid
V <- corMatrix(x$modelStruct$corStruct)
Y = x$resid + x$fitted
one <- matrix(1, length(Y), 1)
a <- as.numeric(solve(t(one) %*% solve(V) %*% one) %*% (t(one) %*% solve(V) %*% Y))
r.squared= 1-(t(e) %*% solve(V) %*% e) / (t(Y-a) %*% solve(V) %*% (Y-a))
return(r.squared[1,1])
}
## example:
gls.r.squared(out) # probably will be pretty low, as we simulated data with no correlation
?dmnorm
?dmorn
?dnorm
?function
()
gyhyyiiopoi][]
''
'53'
43p5-=3405[;q3]
4
?dmnorm
??dmnorm
library("mnormt", lib.loc="~/R/win-library/3.1")
?dmnorm
library(phytools)
library(ape)
library(nlme)
library(geiger)
setwd("/Users/Chelsea/Documents/PhD/PCM2018/PCM2018/Project")
soltree <- read.tree(file="smoothprunedtree.tre") ## saved within the same folder
plot(soltree) # plot tree to make sure it's working
taxa <- soltree$tip.label #pull taxon list
data <- read.csv("Data_LF1.csv")
colnames(data)
data <- transform(data, newcol=paste(Genus, Species, sep="_"))# need to make genus and species into one row
length(colnames(data)) # find new column
states <- structure(data[[6]], names = data[[9]]) #Pull out rows/species that have life form data
length(states) # this tell you how many states there are
as.character(names(states)) ## need to change vector from factor to character..
data <- transform(data, newcol=paste(Genus, Species, sep="_"))# need to make genus and species into one row
length(colnames(data)) # find new column
states <- structure(data[[6]], names = data[[9]]) #Pull out rows/species that have life form data
length(states) # this tell you how many states there are
as.character(names(states)) ## need to change vector from factor to character..
to.drop <- setdiff(taxa, names(states)) #finds which names in tree NOT also in names of states
length(to.drop) - length(states) # how many tips should be left
prunedtree <- drop.tip(soltree, to.drop) #removes those taxa, new tree has
smoothprunedtree<-chronopl(prunedtree, lambda=1, age.min=50, CV=TRUE) #make ultrametric, necessary for PCMs
plot(smoothprunedtree, cex = 0.3) #looks good
taxa2 <- smoothprunedtree$tip.label #pull taxon list for pruned tree
states2 <- structure(data[[5]], names = data[[9]]) # take only the genome size from the pruned tree
to.drop2 <- setdiff(taxa2, names(states2)) #finds which names in tree NOT also in names of states
length(states2) - length(to.drop2) # how many tips should be left
tr <- drop.tip(smoothprunedtree, to.drop2) #removes those taxa, new tree has 186 tips
states3 <- structure(data[[3]], names = data[[9]])
df <- data.frame(states, states2, states3, row.names = data[,9])
rname <- names(states2)
row.names(df) <- rname
match <- match(tr$tip.label, rownames(df)) # this matches the data and with tree tips
sorteddata <- df[,][match,] # this get cleans the data
obj <- contMap(tr, sorteddata$states, plot = FALSE, method == "fastAnc") #from http://www.phytools.org/eqg2015/asr.html
obj <- contMap(tr, sorteddata$states, plot = FALSE) #from http://www.phytools.org/eqg2015/asr.html
plotTree(tr, sorteddata$states2, tiplabels=FALSE)
obj<-contMap(tree,x)
lfmat <- as.matrix(sorteddata$states2)
obj<-contMap(tree, lfmat)
obj<-contMap(tr, lfmat)
plot(obj, type = "fan", legend = 0.7 * max(nodeHeights(phy)), fsize = c(0.6, 0.9)) #fan tree
plot(obj, lwd = 1.25, legend = 0.7 * max(nodeHeights(phy)), fsize = c(0.3, 0.7)) #rectangular
obj
?contMap
obj <- contMap(tr, sorteddata$states, plot = FALSE) #from http://www.phytools.org/eqg2015/asr.html
obj <- contMap(tr, lfmat, edges = FALSE)
tr$edge.length
collapsedphylogeny <- di2multi(tr, 0.03)
collapsedphylogeny
collapsedphylogeny$edge.length
tree <- di2multi(tr, 0.03)
obj <- contMap(tree, lfmat)
tree <- di2multi(tr, 0.5)
obj <- contMap(tree, lfmat)
tree <- di2multi(tr, 1)
obj <- contMap(tree, lfmat)
tree
tree$edge
obj <- contMap(tree, lfmat, outline = FALSE)
obj <- contMap(tree, lfmat, outline = FALSE, plot = FALSE)
obj <- contMap(tree, lfmat, plot = FALSE)
lfmat <- as.vector(sorteddata$states2)
obj <- contMap(tree, lfmat, plot = FALSE)
lfmat
states
lfmat
sorteddata$states2
lfmat <- as.vector(sorteddata$states2, row.names= TRUE)
sorteddata[[1]]
names(sorteddata)
row.names(sorteddata)
statesV <- structure(sorteddata[[1]], names = row.names(sorteddata))
statesV
str(statesV)
statesV <- as.vector(structure(sorteddata[[1]], names = row.names(sorteddata)))
statesV
obj <- contMap(tr, row.names(sorteddata), plot = FALSE) #from http://www.phytools.org/eqg2015/asr.html
statesV <- structure(sorteddata[[1]], names = row.names(sorteddata))
obj <- contMap(tr,  statesV, plot = FALSE) #from http://www.phytools.org/eqg2015/asr.html
plot(obj, type = "fan", legend = 0.7 * max(nodeHeights(phy)), fsize = c(0.6, 0.9)) #fan tree
contMap(tr,  statesV)
obj <- contMap(tr,  statesV) #from http://www.phytools.org/eqg2015/asr.html
plot(obj, lwd = 1.25, legend = 0.7 * max(nodeHeights(phy)), fsize = c(0.3, 0.7)) #rectangular
plot(obj, lwd = 1.25, legend = 0.7 * max(nodeHeights(tr)), fsize = c(0.3, 0.7)) #rectangular
str(statesV)
statesV
plot(obj, type = "fan", legend = 0.7 * max(nodeHeights(tr)), fsize = c(0.6, 0.9)) #fan tree
statesV2 <- structure(sorteddata[[2]], names = row.names(sorteddata))
statesV3 <- structure(sorteddata[[3]], names = row.names(sorteddata))
obj <- contMap(tr,  statesV2) #from http://www.phytools.org/eqg2015/asr.html
plot(obj, type = "fan", legend = 0.7 * max(nodeHeights(tr)), fsize = c(0.6, 0.9)) #fan tree
obj <- contMap(tr,  statesV3) #from http://www.phytools.org/eqg2015/asr.html
plot(obj, type = "fan", legend = 0.7 * max(nodeHeights(tr)), fsize = c(0.6, 0.9)) #fan tree
fit<-gls(states2 ~ states, sorteddata) #gls of the two varibles
summary(fit) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
fit<-gls(states2 ~ states, sorteddata) #gls of the two varibles
summary(fit) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
plot)fit
plot(fit)
fit1<-gls(states3 ~ states, sorteddata) #gls of the two varibles
summary(fit1) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
anova(fit1)
plot(fit1)
fit2<-gls(states2 ~ states3, sorteddata) #gls of the two varibles
summary(fit2) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
fit2<-gls(states2 ~ states3, sorteddata) #gls of the two varibles
summary(fit2) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
anova(fit2)
plot(fit2)
fit3<-gls(states2 ~ states + states3, sorteddata) #gls of the two varibles
summary(fit3) #p= 2e-04, lnLik= -194.88, r^2 = 1.330237
anova(fit3)
plot(fit3)
